import numpy as np
import pandas as pd
def logisticRegression_vector(X,Y,iter=1000,lr=0.01,cutoff=0.5):
    x=np.array(X).T # Need x in (# of colums x # of rows)
    y=np.array(Y).T # Need y in row vector [y1,y2....ym]
    w=np.zeros((x.shape[0],1)) ## shape : [ # of columns in x , 1]
    b=0
    m=x.shape[1] ## # of rows in vector x
    costf=[]
    for i in range(iter):
        Z=np.dot(w.T,x)+b ## computing b + w^t*x. 1 x m [ 1 X # of rows]
        A=(1/(1+np.exp(-Z))) ## Activation function [A1, A2, A3...Am] 1 x m [ 1 X # of rows ]
        E=A-y ## Predicted - Actual [E1, E2.... Em] 1 * m
        cost=-1/m* (np.sum(np.multiply(y,np.log(A))+np.multiply((1-y),np.log(1-A))))## cost function
        costf.append(cost)
        ## We didn't use np.dot in above cost function because y and A are row cectors of size1 *m
        dw=(1/m)*np.dot(x,E.T) ## [number of columns x 1]
        db=(1/m)*np.sum(E) ## intercept
        w=w-lr*dw ## updated weights
        b=b-lr*db ## updated intercepts
    nZ=np.dot(w.T,x)+b
    nA=(1/(1+np.exp(-Z)))
    predict=np.where(nA>cutoff,1,0)
    unique, counts = np.unique(predict-y, return_counts=True)
    similar=dict(zip(unique, counts))[0]
    accuracy=(similar/m)*100
    import matplotlib.pyplot as plt
    plt.plot(costf)
    return (accuracy)
